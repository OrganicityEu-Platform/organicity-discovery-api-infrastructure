# Add elastic search, logstash and kibana

# service configuration for Redis
redis:
  image: redis:latest
  hostname: redis1
  ports:
    - "6379:6379"

# service configuration for Postgres
db:
  build: .
  # use the preferred version of the official Postgres image
  # see https://hub.docker.com/_/postgres/
  dockerfile: containers/Dockerfile-postgres
  # persist the database between containers by storing it in a volume
  volumes:
    - oraganicityapi-postgres:/var/lib/postgresql/data

mongo:
  build: .
  # sources environment variable configuration for our app, required for the mongo tunnel
  env_file: .env
  # build with a different Dockerfile
  dockerfile: containers/Dockerfile-mongo
  volumes:
    - ./scripts:/scripts
    - .:/organicity-discovery-api
    - ./organicity-discovery-api/tmp:/tmp
  # Expose port only within docker
  ports:
    - "3344:3344"
  command: bash -c "/scripts/tunnel.sh"

# service configuration for our dockerized Rails app
app:
  # use the Dockerfile next to this file
  build: .
  # sources environment variable configuration for our app
  env_file: .env
  # rely on the RAILS_ENV value of the host machine
  volumes:
    - ./organicity-discovery-api:/organicity-discovery-api
    - ./organicity-discovery-api/tmp:/tmp
    - ./scripts:/scripts
    - ./config:/config
  # makes the app container aware of the DB container
  links:
    - db
    - redis
    - mongo
  # expose the port we configured Puma to bind to (should expose only internally)
  ports:
    - "3000:3000"
  command: bash -c "/scripts/startup.sh"

worker:
  build: .
  volumes_from:
    - app
  env_file: .env
  links:
    - app
    - mongo
    - db
    - redis
  command: bash -c "/scripts/sidekiq.sh"

# spring:
#   build: .
#   volumes:
#     - .:/organicity-discovery-api
#   links:
#     - app
#   command: spring server
#
#   # This ensures that the pid namespace is shared between the host
#   # and the container. It's not necessary to be able to run spring
#   # commands, but it is necessary for "spring status" and "spring stop"
#   # to work properly.
#   pid: host

# service configuration for our web server
web:
  # set the build context to the root of the Rails app
  build: .
  # build with a different Dockerfile
  dockerfile: containers/Dockerfile-nginx
  # makes the web container aware of the app container
  links:
    - app
  env_file: .env
  # domain service mapping. full configuration in ./containers/nginx.conf
  environment:
    DOMAINS: 'discovery.organicity.eu -> http://app:3000'
    STAGE: local # Set this on local for using self-signed certificate
  ports:
    - 80:80
    - 443:443